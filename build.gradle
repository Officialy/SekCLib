import org.apache.http.HttpEntity
import org.apache.http.client.methods.CloseableHttpResponse
import org.apache.http.client.methods.HttpPost
import org.apache.http.entity.ContentType
import org.apache.http.entity.mime.MultipartEntityBuilder
import org.apache.http.impl.client.CloseableHttpClient
import org.apache.http.impl.client.HttpClients

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = "https://repo.spongepowered.org/maven" }
        maven { url = "https://maven.sekwah.com" }
        maven {url "https://plugins.gradle.org/m2/"}
        // Only temporary
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
        classpath "com.wynprice.cursemaven:CurseMaven:2.1.5"
        classpath "org.apache.httpcomponents:httpmime:4.5.13"
    }
}
plugins {
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: "java"
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

apply plugin: "org.spongepowered.mixin"
apply plugin: "com.wynprice.cursemaven"

def branch = System.getenv("GITHUB_REF")
def sha = System.getenv("GITHUB_SHA")
def isDevBranch = branch == null || (!(branch.startsWith("refs/heads/release/") || branch.startsWith("refs/tags/")))


version = "${project.version}${isDevBranch ? '-SNAPSHOT' : ''}"
group = project.package // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.archive

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        url "https://minecraft.curseforge.com/api/maven/"
    }
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: project.minecraft_version

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                "${project.modid}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                "${project.modid}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', ''
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', project.modid, '--all', '--output', file('src/generated/resources/')

            mods {
                "${project.modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    include {
        compile.extendsFrom(include)
    }
    includePlusMeta {
        include.extendsFrom(includePlusMeta)
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.33'

    annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'

}

mixin {
    add sourceSets.main, "mixins.${project.modid}.refmap.json"
}

jar {
    finalizedBy 'reobfJar'
    classifier = 'universal'
    manifest {
        attributes([
                "Specification-Title": project.modid,
                "Specification-Vendor": project.vendor,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :project.vendor,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "mixins.${project.modid}.json"
        ])
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

task srcJar(type: Jar) {
    build.dependsOn it
    from sourceSets.main.allSource
    classifier = 'sources'
    from file("LICENSE")
}

task deobfJar(type: Jar) {
    build.dependsOn it
    from sourceSets.main.output
    classifier = 'deobf'
    from file("LICENSE")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
            artifact srcJar
            artifact deobfJar
        }
    }
    repositories {
        maven {
            url "s3://sekwah-maven/"
            authentication {
                awsIm(AwsImAuthentication)
            }
        }
    }
}

task discordupload {
    dependsOn(jar)
    doLast {
        String discordWebhook = System.getenv("DISCORD_WEBHOOK")

        if(discordWebhook != null) {
            println("Logging Into Discord")

            CloseableHttpClient httpClient = HttpClients.createDefault()
            HttpPost uploadFile = new HttpPost(discordWebhook)

            MultipartEntityBuilder builder = MultipartEntityBuilder.create()
            builder.addTextBody("content", "New automated dev build\n\n" +
                    "Current Features: <${project.github}/blob/${sha}/CHANGELOG.md>")

            builder.addBinaryBody("file", file(jar.archiveFile).newInputStream(), ContentType.APPLICATION_OCTET_STREAM, jar.archiveName)

            HttpEntity multipart = builder.build()

            uploadFile.setEntity(multipart)
            CloseableHttpResponse response = httpClient.execute(uploadFile)
            response.getEntity()

            println("Posted build")

        } else {
            println("Discord webhook unspecified")
        }
    }
}

tasks.curseforge.enabled = System.getenv("CURSE_API") != null

curseforge {
    logger.info("Curse api: " + System.getenv("CURSE_API"))
    if (System.getenv("CURSE_API") != null) {
        apiKey = System.getenv("CURSE_API")
    }
    project {
        id = project.curse_project_id
        changelog = "${project.github}/blob/${sha}/CHANGELOG.md"
        changelogType = 'markdown'
        releaseType = 'beta'
        addGameVersion '1.16.1'
        addGameVersion '1.16.2'
        addGameVersion '1.16.3'
        addGameVersion '1.16.4'
        addGameVersion '1.16.5'

        mainArtifact(jar){

        }
        addArtifact sourcesJar
        addArtifact deobfJar
        addArtifact javadocJar
    }
}
